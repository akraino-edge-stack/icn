# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019 Intel Corporation

---

- name: include sriov/common default vars
  include_vars: ../../../sriov/common/defaults/main.yml

- block:
  - name: check if FPGA SRIOV device is connected and get PCI address of devices
    shell: lspci | grep {{ fpga_userspace_vf.pf_device_id }} | awk '{print $1;}'
    register: pci_address
    
  - name: bind FPGA SRIOV PF to IGB UIO
    shell: echo "{{ fpga_userspace_vf.vendor_id }} {{ fpga_userspace_vf.pf_device_id }}" | sudo tee /sys/bus/pci/drivers/igb_uio/new_id

  - name: enable PF FPGA bind to IGB_UIO on boot
    lineinfile:
      state: present
      dest: /etc/rc.d/rc.local
      line: "{{ item }}"
    with_items:
      - "echo \"{{ fpga_userspace_vf.vendor_id}} {{ fpga_userspace_vf.pf_device_id }}\" | sudo tee /sys/bus/pci/drivers/igb_uio/new_id"
    
  - name: create SRIOV VFs
    shell: "echo 0 | sudo tee /sys/bus/pci/devices/0000:{{ item }}/max_vfs && echo {{ fpga_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/0000:{{ item }}/max_vfs"
    with_items:
      - "{{ pci_address.stdout_lines }}"
  
  - name: enable creation of SRIOV VFs on boot
    lineinfile:
      state: present
      dest: /etc/rc.d/rc.local
      line: "echo {{ fpga_userspace_vf.vf_number }} | sudo tee /sys/bus/pci/devices/0000:{{ item }}/max_vfs"
    with_items:
      - "{{ pci_address.stdout_lines }}"

  - name: bind FPGA SRIOV VFs to IGB_UIO
    shell: echo "{{ fpga_userspace_vf.vendor_id }} {{ fpga_userspace_vf.vf_device_id }}" | sudo tee /sys/bus/pci/drivers/igb_uio/new_id

  - name: enable VFs binding to IGB_UIO on boot
    lineinfile:
      state: present
      dest: /etc/rc.d/rc.local
      line: "{{ item }}"
    with_items:
      - "echo \"{{ fpga_userspace_vf.vendor_id }} {{ fpga_userspace_vf.vf_device_id }}\" | sudo tee /sys/bus/pci/drivers/igb_uio/new_id"
  when: fpga_userspace_vf.enabled

- name: check local bbdev_config_service_directory
  stat:
    path: "{{ syscfg_local_path }}"
  connection: local
  register: syscfg_local_file

- name: file not present
  debug:
    msg: "{{ syscfg_local_path }} does not exists, FPGA Config utility won't be set up on the node"
  when: syscfg_local_file.stat.exists == False

- name: set up FPGA Config utility on the node
  block:
  - name: copy local FPGA Config utility to remote
    copy:
      src: "{{ syscfg_local_path }}"
      dest: "{{ syscfg_remote_path }}"
  - name: build FPGA Config utility worker image
    shell: make build-docker-fpga-cfg
    args:
      chdir: "{{ git_repo_dest }}"
  when: syscfg_local_file.stat.exists == True

- name: disable SR-IOV ethernet interfaces
  shell: echo 0 > {{ item }}
  with_lines: cat /etc/rc.d/rc.local 2> /dev/null | grep sriov_numvfs | sed -e 's/.*> //'

- name: clear SR-IOV boot time setup
  lineinfile:
    path: /etc/rc.d/rc.local
    regexp: '(.*)sriov_numvfs(.*)'
    state: absent

- name: checking network interfaces for SR-IOV support
  stat:
    path: /sys/class/net/{{ item.key }}/device/sriov_numvfs
  loop: "{{ query('dict', sriov.network_interfaces) }}"
  register: sriov_support

- fail:
    msg: 'The device does not support SR-IOV'
  with_items: "{{ sriov_support.results }}"
  when: not item.stat.exists

- name: enable SR-IOV for network interfaces
  shell: echo 0 > /sys/class/net/{{ item.key }}/device/sriov_numvfs && echo {{ item.value }} > /sys/class/net/{{ item.key }}/device/sriov_numvfs
  loop: "{{ query('dict', sriov.network_interfaces) }}"

- name: enable SR-IOV for network interfaces at boot time
  lineinfile:
    path: /etc/rc.d/rc.local
    line: "echo {{ item.value }} > /sys/class/net/{{ item.key }}/device/sriov_numvfs"
  loop: "{{ query('dict', sriov.network_interfaces) }}"

- name: enable SR-IOV startup
  file:
    dest: /etc/rc.d/rc.local
    mode: a+x
