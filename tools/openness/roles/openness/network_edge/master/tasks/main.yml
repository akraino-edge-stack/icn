# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019 Intel Corporation

---

- name: openness' ovn configuration
  block:
  - name: apply CRD defining local subnet
    command: "kubectl apply -f {{ git_repo_dest }}/kube-ovn/crd_local.yml"

  - name: wait for OVN DB socket
    wait_for:
      path: /var/run/openvswitch/ovnnb_db.sock
      timeout: 600

  - name: add local-ovs-phy port to local switch
    shell: ovn-nbctl --may-exist lsp-add local local-ovs-phy
    register: result
    until: not result.failed
    retries: 20
    delay: 30

  - name: configure local-ovs-phy port
    shell: |
      ovn-nbctl lsp-set-addresses local-ovs-phy unknown
      ovn-nbctl lsp-set-type local-ovs-phy localnet
      ovn-nbctl lsp-set-options local-ovs-phy network_name=local-network

- name: make sure /etc/openness, /etc/openness/certs and /etc/openness/configs exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
  - /etc/openness
  - "{{ certs_dest }}"
  - "{{ configs_dest }}"

- name: create openness namespace if needed
  block:
  - name: check if openness namespace exists
    shell: kubectl get ns openness
    ignore_errors: yes
    register: get_ns_openness
  - name: create openness namespace
    shell: kubectl create namespace openness
    when: get_ns_openness.rc == 1

- name: root CA creation
  block:
  - name: create directory for root CA
    file:
      name: "{{ certs_dest }}/CA"
      state: directory
  - name: create root CA
    shell: "{{ git_repo_dest }}/kube-ovn/tls_pair.sh openness {{ certs_dest }}/CA"

- name: create root CA secret
  block:
  - name: check if root CA secret exists
    shell: kubectl get secret root-ca --namespace=openness
    ignore_errors: yes
    register: get_secret_rootca
  - name: create secret with root CA
    shell: >
      kubectl create secret generic root-ca
      --from-file={{ certs_dest }}/CA/key.pem
      --from-file={{ certs_dest }}/CA/cert.pem
      --namespace=openness
    when: get_secret_rootca.rc == 1

- name: create certificate generator secret
  block:
  - name: check if certificate generator secret exists
    shell: kubectl get secret certgen --namespace=openness
    ignore_errors: yes
    register: get_secret_certgen
  - name: create secret with certificate generator
    shell: >
      kubectl create secret generic certgen
      --from-file={{ git_repo_dest }}/kube-ovn/tls_pair.sh
      --from-file={{ git_repo_dest }}/kube-ovn/entrypoint_tls.sh
      --namespace=openness
    when: get_secret_certgen.rc == 1

- name: generate certs of openness components
  include_tasks: certs.yml

- name: create EAA tls secret
  block:
  - name: check if EAA tls secret exists
    shell: kubectl get secret eaa-tls --namespace=openness
    ignore_errors: yes
    register: get_secret_eaa
  - name: create secret with EAA certs
    shell: >
      kubectl create secret generic eaa-tls
      --from-file=rootCA.key={{ certs_dest }}/eaa/CA/key.pem
      --from-file=rootCA.pem={{ certs_dest }}/eaa/CA/cert.pem
      --from-file=server.key={{ certs_dest }}/eaa/key.pem
      --from-file=server.pem={{ certs_dest }}/eaa/cert.pem
      --namespace=openness
    when: get_secret_eaa.rc == 1

- name: create syslog configmap
  block:
  - name: check if syslog configmap exists
    shell: kubectl get configmap syslog-conf --namespace=openness
    ignore_errors: yes
    register: get_configmap_syslog
  - name: create configmap with syslog configs
    shell: >
      kubectl create configmap syslog-conf
      --from-file={{ git_repo_dest }}/kube-ovn/syslog-ng-k8s-master.conf
      --from-file={{ git_repo_dest }}/kube-ovn/syslog-ng-k8s-worker.conf
      --namespace=openness
    when: get_configmap_syslog.rc == 1

- name: apply openness definitions
  command: kubectl apply -f {{ item }}
  with_items: "{{ openness_yamls }}"

- name: copy logrotate config
  copy:
    src: logrotate_openness
    dest: /etc/logrotate.d/openness
    remote_src: no

- name: build CLIs
  include_tasks: build_cli.yml
