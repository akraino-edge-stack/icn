# SPDX-License-Identifier: Apache-2.0
# Copyright Â© 2019 Intel Corporation

---

- name: include common vars
  include_vars: ../../common/defaults/main.yml

- name: prepare firewall
  include_tasks: add_firewall_rules.yml

- name: create directory for certs used by AF and NEF
  file:
    name: "{{ certs_dest }}/ngc"
    state: directory

- name: copy genCerts.json file
  copy:
    src: "{{ git_repo_ngc_dir }}/scripts/genCerts.sh"
    dest: "{{ certs_dest }}/ngc"
    mode: a+x

- name: run script to generate cerificates
  shell: './genCerts.sh -t DNS -n {{ controller_name }} -m {{ node_name }}'
  args:
    chdir: "{{certs_dest}}/ngc"

- name: copy certs to remote nodes
  copy:
    src: "{{ certs_dest }}/ngc"
    dest: "{{ certs_dest }}"
  delegate_to: "{{ controller_ip }}"

- name: build NEF component
  shell: source /etc/profile && make nef
  args:
    chdir: "{{ git_repo_ngc_dir }}"

- name: copy nef binaries to build folder
  copy:
    src: "{{ git_repo_ngc_dist_dir }}/nef"
    dest: "{{ git_repo_ngc_build_dir }}/onprem/nef"

- name: copy nef.json configuration file
  copy:
    src: "{{ git_repo_ngc_dir }}/configs/af.json"
    dest: "{{ configs_dest }}/ngc"

- name: check Docker service
  shell: systemctl status docker
  ignore_errors: true
  changed_when: false
  args:
    warn: false
  register: docker_service_status

- name: build NEF docker image
  docker_image:
    name: nef-image:1.0
    source: build
    build:
      path: "{{ git_repo_ngc_build_dir }}/onprem/nef"
      pull: yes
      use_config_proxy: yes
  when: docker_service_status.rc == 0

- name: Run NEF container
  docker_container:
    name: nef-container
    image: nef-image:1.0
    state: started
    volumes:
      - /etc/openness/certs/ngc:/etc/certs:rw
      - /etc/openness/configs/ngc:/root/configs:rw
    published_ports:
      - 8060:8060
    env:
      no_proxy: "{{ proxy_os_noproxy}},{{ controller_name }},{{ node_name }}"
  when: docker_service_status.rc == 0

- name: update container's /etc/hosts file
  shell: 'docker exec -t nef-container /bin/bash -c "echo {{ controller_ip }} {{ controller_name }} | tee -a /etc/hosts"'

